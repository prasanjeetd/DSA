// See https://aka.ms/new-console-template for more information
using ConsoleApp1;
using ConsoleApp1.CSharp;
using ConsoleApp1.Interviews;
using ConsoleApp1.LeetCode;

Console.WriteLine("Hello, World!");

var nums = new int[] { 2, 7, 11, 15, 0 };

var indices = new TwoSumByIndex().twoSum(nums, 17);

var x = 2;

var c = new ReverseNumber().reverse(1234);
Console.WriteLine(c);

var digitToWords = new NumberToWords();
digitToWords.printDigitToWord(1234);
digitToWords.printDigitToWord(2);
digitToWords.printDigitToWord(11);

//new TopFloorOfBuilding()
//    .MaxFloor(9, 3, new int[] { 1, 3 ,7}, new int[] { 3, 6,9 });


// write a program to print consecutive characters in a string
// input: "aaabbbcccd"
// output: "a3b3c3d1"
// input: "aaabbbcccdd"
// output: "a3b3c3d2"

// input: "aaabbbcccddde"
// output: "a3b3c3d3e1"



// input: "aaabbbcccd"

// output: "a3b3c3d1"

//ConsecutiveCharactersPrinter.PrintConsecutiveCharacters("aaabbbcccd");

//new Codility().SolutionB();



string binaryString = "011100";
//int number = Convert.ToInt32(binaryString, 2);
//Console.WriteLine(number); // Outputs: 10


//int step = new NoOFSteps().SolutionC("input111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\r\n");
//Console.WriteLine(step); // Outputs: 10

//new Palindrome().IsPalindrome(12321);
//new RomanToInt().Convert("MCMXCIV");

//new MergeTwoSortedList().Test();
//new LongCommonPrefix().Test();
//new RemoveDuplicatesFromArray().Test();
//new RemoveElementAlgo().Test();
//new IndexInString().Test();
//new CollectionTest().Test();
//new PlusOneAlgo().Test();
//new AddBinaryAlgo().Test();
//new SquareRoot().Test();
//new ClimbingStairsAlgo().Test();
new RemoveDuplicateFromSortedList().Test();
